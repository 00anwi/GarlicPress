@using GarlicPress.classes.bitmapClasses;
@using GarlicPress.components.shared;
@using GarlicPress.constants;
@using GarlicPress.forms;
@using System.Drawing.Imaging;
@using static GarlicPress.MediaLayer;
@using static GarlicPress.components.shared.FabricCanvas<MediaLayer>;
@inject EditMediaLayersForm editMediaLayersForm

<style>
    label {
        font-family: 'GarlicFont';
    }

    input {
        font-family: 'GarlicFont';
    }

    button {
        font-family: 'GarlicFont';
    }

    select {
        font-family: 'GarlicFont';
    }

</style>

<div class="h-screen p-1">
    <div class="grid grid-cols-4 gap-2">
        <div>
            <Select @bind-Value="_selectedMediaLayerCollectionId" @bind-Value:after="(async () => await UpdateGameArt())"
                    Items="GameMediaGeneration.GetMediaLayerCollections().ToList()">
                <Label>Media Layer Collection</Label>
                <Option Context="mediaLayoutCollection">
                <option value="@mediaLayoutCollection.id">@mediaLayoutCollection.name</option>
                </Option>
            </Select>
        </div>
        <div class="grid">
            <Button ButtonText="Add Media Layer Collection" OnClick="() => addModal?.Open()"></Button>
        </div>
        <div class="grid">
            <Button ButtonText="Edit Media Layer Collection Name" OnClick="() => editModal?.Open()"></Button>
        </div>
        <div class="grid">
            <Button ButtonText="Delete Media Layer Collection" OnClick="() => deleteModal?.Open()"></Button>
        </div>

        <ModalComponent @ref="addModal">
            <AddMediaLayoutCollectionModal OnNewLayerAdded="(x => { var newMediaLayerCollection = GameMediaGeneration.AddMediaLayerCollection(x.name, x.templateid); _selectedMediaLayerCollectionId = newMediaLayerCollection.id; addModal?.Close(); })"></AddMediaLayoutCollectionModal>
        </ModalComponent>

        @if (_selectedMediaLayerCollection is not null)
        {
            <ModalComponent @ref="deleteModal">
                <DeleteConfirmationModal OnConfirmDelete="() => { GameMediaGeneration.RemoveMediaLayerCollection(_selectedMediaLayerCollectionId); deleteModal?.Close(); }" OnCloseModal="() => deleteModal?.Close()"></DeleteConfirmationModal>
            </ModalComponent>

            <ModalComponent @ref="editModal">
                <EditMediaLayoutCollectionModal CurrentName="@_selectedMediaLayerCollection.name" OnNameChanged="(name) => { if (_selectedMediaLayerCollection is not null) { _selectedMediaLayerCollection.name = name; } editModal?.Close(); }"></EditMediaLayoutCollectionModal>
            </ModalComponent>
        }

    </div>
    <div class="grid grid-cols-3 gap-2">
        <div>
            <Select @bind-Value="_selectedDriveValue" @bind-Value:after="(() => { _selectedDrive = GarlicDrive.GetGarlicDrives().FirstOrDefault(x => x.name == _selectedDriveValue); UpdateGames();})"
                    Items="GarlicDrive.GetGarlicDrives()">
                <Label>Drive</Label>
                <Option Context="drive">
                <option value="@drive.name">@drive.name</option>
                </Option>
            </Select>
        </div>
        <div>
            <Select @bind-Value="_selectedSystemValue" @bind-Value:after="(() => { _selectedSystem = GarlicSystem.GetAllSystems().FirstOrDefault(x => x.name == _selectedSystemValue); UpdateGames();})"
                    Items="GarlicSystem.GetAllSystems()">
                <Label>System</Label>
                <Option Context="system">
                <option value="@system.name">@system.name</option>
                </Option>
            </Select>
        </div>
        <div>

            @if (_games.Any())
            {
                <Select @bind-Value="_selectedGame" @bind-Value:after="(async () => { await UpdateGameArt(); })"
                        Items="_games">
                    <Label>Games</Label>
                    <Option Context="game">
                    <option value="@game">@game</option>
                    </Option>
                </Select>
            }
            else
            {
                <label for="Game" class="block text-xs font-medium">
                    Game
                </label>
                <input id="Game" type="text" @bind="_selectedGame" @bind:after="(async () => { await UpdateGameArt(); })"
                       class="bg-gray-50 border border-gray-300 text-gray-900 text-xs focus:ring-blue-500 focus:border-blue-500 block w-full p-1" />
            }
        </div>
    </div>

    <div class="grid grid-cols-4 overflow-auto gap-2 h-[50vh]">
        <div class="col-span-2 flex py-2 justify-center items-center overscroll-auto relative h-[50vh]">
            <FabricCanvas TItem="MediaLayer" @ref="_fabricCanvas" MediaUpdated="OnMediaUpdated" MediaDeleted="OnMediaDeleted" MediaSelected="OnMediaSelected" MediaUnselected="OnMediaUnselected" />

            @if (_artUpdateRunning)
            {
                <div class="absolute inset-0 flex justify-center items-center bg-black bg-opacity-60">
                    <div class="flex flex-col items-center gap-2 text-white">
                        <GarlicLoading></GarlicLoading>
                        <b>Loading Game Art...</b>
                    </div>
                </div>
            }

        </div>
        <div class="flex-initial border rounded-sm border-gray-800 overflow-auto scrollbar my-1 p-1">
            @if (_selectedMediaLayerCollection is not null && _fabricCanvas is not null)
            {
                <MediaLayers MediaLayerList="_selectedMediaLayerCollection.mediaLayers" @bind-SelectedMediaLayer="_selectedMediaLayer" OnMediaLayerDelete="async id => { OnMediaDeleted(id); await _fabricCanvas.RemoveImage(id); }" OnMediaLayerSelected="_fabricCanvas.SelectObject" />
            }
        </div>
        <div class="flex-initial border rounded-sm border-gray-800 overflow-auto scrollbar m-1 p-1">
            <MediaLayerControl IsImageSelected="_imageSelected" OnApplyFilters="async () => await UpdateImage(_selectedMediaLayer, _selectedSystem, true)" mediaLayer="_selectedMediaLayer" mediaLayerChanged="async () => await UpdateImage(_selectedMediaLayer, _selectedSystem)" />
        </div>
    </div>

    <div class="grid grid-cols-4">
        <div class="col-span-3 border rounded-sm border-gray-800">
            <MediaContent _selectedSystem="_selectedSystem" _selectedGame="@_selectedGame" _game="_game" _addNewMediaLayerImageToCanvas="AddNewMediaLayerImageToCanvas"></MediaContent>
        </div>

        <div class="grid gap-2 ml-2">
            <Button ButtonText="@(_artUpdateRunning ? "Updating..." : "Update")" disabled="@_artUpdateRunning" OnClick="(async () => { await UpdateGameArt(); })"></Button>
            <Button ButtonText="@(_artUpdateDeviceRunning ? "Updating Art on Device..." : "Update Art on Device")" disabled="@_artUpdateDeviceRunning" OnClick="(async () => { await UpdateGameArtDevice(); })"></Button>
            <Button ButtonText="@(_saving ? "Saving..." : "Save")" disabled="@_saving" OnClick="SaveMediaLayoutCollection"></Button>
            <Button ButtonText="Close" OnClick="() => { editMediaLayersForm.Close(); }"></Button>
        </div>
    </div>
</div>

<ModalComponent @ref="_artUpdateModal">
    <p class="m-2 p-2 ">
        @((MarkupString)_artUpdateDeviceStatus)
    </p>
</ModalComponent>

@code {
    public GarlicDrive? _selectedDrive
    {
        get
        {
            return EditMediaLayersForm.Instance._garlicDrive;
        }
        set
        {
            EditMediaLayersForm.Instance._garlicDrive = value;
        }
    }
    string? _selectedDriveValue { get; set; }

    public GarlicSystem? _selectedSystem
    {
        get
        {
            return EditMediaLayersForm.Instance._garlicSystem;
        }
        set
        {
            EditMediaLayersForm.Instance._garlicSystem = value;
        }
    }
    string? _selectedSystemValue { get; set; }

    public string _selectedGame
    {
        get
        {
            return EditMediaLayersForm.Instance._game;
        }
        set
        {
            EditMediaLayersForm.Instance._game = value;
        }
    }
    List<string> _games = new();

    FabricCanvas<MediaLayer>? _fabricCanvas;

    Guid? _selectedMediaLayerCollectionId { get; set; }
    MediaLayerCollection? _selectedMediaLayerCollection { get { return GameMediaGeneration.GetMediaLayerCollections().FirstOrDefault(x => x.id == _selectedMediaLayerCollectionId); } }

    List<IFilter> _filters = new();
    bool _imageSelected = false;
    MediaLayer? _selectedMediaLayer;

    bool _artUpdateRunning;

    bool _artUpdateDeviceRunning;
    string _artUpdateDeviceStatus = "";
    ModalComponent? _artUpdateModal;

    string _selectedImgPath { get { return _selectedDrive?.path + "/Roms/" + _selectedSystem?.folder + "/Imgs/"; } }
    string _selectedRomPath { get { return _selectedDrive?.romPath + "/" + _selectedSystem?.folder; } }


    GameResponse? _game;

    ModalComponent? addModal;
    ModalComponent? deleteModal;
    ModalComponent? editModal;

    bool _saving = false;

    protected override void OnInitialized()
    {
        _selectedDrive ??= GarlicDrive.GetGarlicDrives().First();
        _selectedSystem ??= GarlicSystem.GetAllSystems().First();
        _selectedDriveValue = _selectedDrive.name;
        _selectedSystemValue = _selectedSystem.name;
        _selectedMediaLayerCollectionId = GameMediaGeneration.GetMediaLayerCollections().FirstOrDefault()?.id;
        UpdateGames();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateGameArt();
            EditMediaLayersForm.Instance.OnUpdatedModels += OnUpdatedModels_Event;
            StateHasChanged();
        }
    }

    async void OnUpdatedModels_Event()
    {
        _selectedDriveValue = _selectedDrive?.name;
        _selectedSystemValue = _selectedSystem?.name;
        UpdateGames();
        await UpdateGameArt();
    }

    async void SaveMediaLayoutCollection()
    {
        _saving = true;
        _ = Task.Yield();
        GameMediaGeneration.SaveMediaLayoutJson();
        await Task.Delay(1000);
        _saving = false;
        StateHasChanged();
    }

    private void OnMediaUpdated(FabricCanvas<MediaLayer>.imageDetails details)
    {
        UpdateMediaLayer(details);
        StateHasChanged();
    }

    private void OnMediaDeleted(Guid id)
    {
        if (_selectedMediaLayerCollection is not null)
        {
            GameMediaGeneration.RemoveMediaLayer(id, _selectedMediaLayerCollection);
        }
    }

    void OnMediaSelected(FabricCanvas<MediaLayer>.imageDetails details)
    {
        _selectedMediaLayer = UpdateMediaLayer(details);
        _imageSelected = true;
    }

    MediaLayer? UpdateMediaLayer(imageDetails details)
    {
        MediaLayer? layer = null;

        if (_selectedMediaLayerCollection != null)
        {
            layer = _selectedMediaLayerCollection.mediaLayers
                .FirstOrDefault(x => x.id == Guid.Parse(details.id));
        }

        if (layer is not null)
        {
            layer.x = details.left;
            layer.y = details.top;
            layer.resizePercent = details.scale;
            layer.angle = details.angle;
            layer.order = details.drawOrder;
        }

        return layer;
    }

    void OnMediaUnselected()
    {
        _imageSelected = false;
    }

    void UpdateGames()
    {
        if (ADBConnection.deviceConnected)
        {
            var list = ADBConnection.GetDirectoryListing(_selectedRomPath);
            _games = list.Where(w => w.Path != "." && w.Path != ".." && w.Path != "Imgs").OrderBy(o => o.Path).Select(x => x.Path).ToList();
        }
    }

    async Task UpdateGameArt()
    {
        if (!_artUpdateRunning
            && _selectedSystem is not null
            && _fabricCanvas is not null
            && !String.IsNullOrWhiteSpace(_selectedGame))
        {
            _artUpdateRunning = true;
            StateHasChanged();
            await Task.Yield();

            //Wait for the canvas to be ready
            var sw = System.Diagnostics.Stopwatch.StartNew();
            while (_fabricCanvas.module is null)
            {
                if (sw.ElapsedMilliseconds > 5000)
                {
                    sw.Stop();
                    break;
                }
                await Task.Delay(100);
            }

            await _fabricCanvas.ClearCanvas();

            await AddSkinMedia();

            await AddText();

            _game = await ScreenScraper.GetGameData(_selectedSystem, _selectedGame, SearchType.GameName);
            if (_selectedMediaLayerCollection is not null)
            {
                if (_game == null || _game?.status == "error")
                {
                    MessageBox.Show("Game not Found : " + _game?.statusMessage + "\nUpdating preview without game media", "warn");
                }

                await foreach (var gameMedia in GameMediaGeneration.GetGameMedia(_game, _selectedMediaLayerCollection, _selectedSystem))
                {
                    if (gameMedia.media is MediaResponse media)
                    {
                        var mediaPath = media.path.Replace("wwwroot/", "");
                        await AddImageToCanvas(mediaPath, gameMedia.layer);
                    }
                }
            }
            else
            {
                MessageBox.Show("Error : no Media Layer Collection Selected", "error");
            }

            _artUpdateRunning = false;
            StateHasChanged();
        }
    }

    async Task AddSkinMedia()
    {
        if (_fabricCanvas is not null && _selectedSystem is not null)
        {
            await _fabricCanvas.AddBackgroundImage(PathConstants.assetSkinPath.Replace("wwwroot/", "") + "background.png");

            foreach (var skinMedia in SkinMedia.GetSkinMedias())
            {
                // Prepend the asset path for media files
                string mediaPath = PathConstants.assetSkinPath.Replace("wwwroot/", "") + skinMedia.MediaFileName;

                string textColor = "white";
                int fontSize = 28;

                if (GarlicSkin.skinSettings is not null)
                {
                    textColor = GarlicSkin.skinSettings.colorguide ?? "#FFFFFF";
                    fontSize = GarlicSkin.languageFiles?.FirstOrDefault()?.garlicLanguageSettings?.fontsize ?? 28;
                }

                switch (skinMedia.SkinMediaType)
                {
                    case SkinMedia.SkinMediaTypes.Picture:
                        if (File.Exists(mediaPath))
                        {
                            await _fabricCanvas.AddStaticImage(mediaPath, skinMedia.X, skinMedia.Y);
                        }
                        break;
                    case SkinMedia.SkinMediaTypes.Text:
                        await _fabricCanvas.AddText(skinMedia.Text, skinMedia.X, skinMedia.Y, textColor, "GarlicFont", fontSize);
                        break;
                    case SkinMedia.SkinMediaTypes.SystemName:
                        await _fabricCanvas.AddText(_selectedSystem.folder, skinMedia.X, skinMedia.Y, textColor, "GarlicFont", fontSize);
                        break;
                    case SkinMedia.SkinMediaTypes.Clock:
                        await _fabricCanvas.AddText(DateTime.Now.ToString("HH:mm"), skinMedia.X, skinMedia.Y, textColor, "GarlicFont", fontSize);
                        break;
                    case SkinMedia.SkinMediaTypes.NavigateLabel:
                        await _fabricCanvas.AddText(GarlicSkin.skinSettings?.navigatelabel ?? skinMedia.Text, skinMedia.X, skinMedia.Y, textColor, "GarlicFont", fontSize);
                        break;
                    case SkinMedia.SkinMediaTypes.OpenLabel:
                        await _fabricCanvas.AddText(GarlicSkin.skinSettings?.openlabel ?? skinMedia.Text, skinMedia.X, skinMedia.Y, textColor, "GarlicFont", fontSize);
                        break;
                    case SkinMedia.SkinMediaTypes.BackLabel:
                        await _fabricCanvas.AddText(GarlicSkin.skinSettings?.backlabel ?? skinMedia.Text, skinMedia.X, skinMedia.Y, textColor, "GarlicFont", fontSize);
                        break;
                    case SkinMedia.SkinMediaTypes.FavoriteLabel:
                        await _fabricCanvas.AddText(GarlicSkin.skinSettings?.favoritelabel ?? skinMedia.Text, skinMedia.X, skinMedia.Y, textColor, "GarlicFont", fontSize);
                        break;
                }
            }
        }
    }

    async Task UpdateGameArtDevice()
    {
        if (_selectedDrive is not null
            && _selectedSystem is not null
            && !String.IsNullOrWhiteSpace(_selectedGame)
            && _selectedMediaLayerCollection is not null)
        {
            _artUpdateDeviceRunning = true;
            _artUpdateModal?.Open();

            _artUpdateDeviceStatus = "Generating Game Art<br />";
            StateHasChanged();
            await Task.Yield();
            var bitmap = await GameMediaGeneration.GenerateGameMedia(_game, _selectedSystem, _selectedMediaLayerCollection);
            _artUpdateDeviceStatus += "Game Art Generation Complete<br />";
            StateHasChanged();

            Directory.CreateDirectory(PathConstants.assetsTempPath);
            bitmap?.Save(PathConstants.assetsTempPath + "gameart-up.png", ImageFormat.Png);
            bitmap?.Dispose();

            _artUpdateDeviceStatus += "Uploading Game Art to Device<br />";
            StateHasChanged();
            GarlicGameArtSearch ggas = new GarlicGameArtSearch(_selectedSystem, _selectedDrive, SearchType.GameName, _selectedGame);
            Progress<int> progress = new Progress<int>(async p =>
            {
                await InvokeAsync(() => StateHasChanged()); _artUpdateDeviceStatus += (".." + p.ToString() + "%");
            });
            await ADBConnection.UploadFileAsync(PathConstants.assetsTempPath + "gameart-up.png", ggas.imgPath, progress, CancellationToken.None);

            _artUpdateDeviceStatus += "<br />Complete";
            StateHasChanged();
            await Task.Delay(1000);
            _artUpdateDeviceRunning = false;
            _artUpdateModal?.Close();
        }
    }

    async Task AddText()
    {
        if (_fabricCanvas is not null)
        {
            if (_games.Any() && GarlicSkin.skinSettings is not null && GarlicSkin.languageFiles is not null && GarlicSkin.validSkinSettings)
            {
                var indexof = _games.IndexOf(_selectedGame);

                var transformedGames = _games.Select(GameMediaGeneration.TransformTitle).ToList();

                await _fabricCanvas.AddText(
                    String.Join("\n", GameMediaGeneration.GetSurroundingStrings(transformedGames, indexof)),
                    GarlicSkin.skinSettings.textmargin,
                    70,
                    GarlicSkin.skinSettings.colorinactive ?? "white",
                    "GarlicFont",
                    GarlicSkin.languageFiles.First().garlicLanguageSettings.fontsize,
                    GarlicSkin.skinSettings.textalignment ?? "left",
                    indexof < 4 ? indexof + 1 : 4,
                    GarlicSkin.skinSettings.coloractive ?? "white");
            }
            else if (_games.Any())
            {
                var indexof = _games.IndexOf(_selectedGame);

                var transformedGames = _games.Select(GameMediaGeneration.TransformTitle).ToList();

                await _fabricCanvas.AddText(
                    String.Join("\n", GameMediaGeneration.GetSurroundingStrings(transformedGames, indexof)),
                    340,
                    70,
                    "lightgray",
                    "GarlicFont");
            }
            else if (ADBConnection.deviceConnected == false)
            {
                await _fabricCanvas.AddText(
                    String.Join("\n", Enumerable.Repeat(_selectedGame, 8)),
                    340,
                    70,
                    "lightgray",
                    "GarlicFont");
            }
        }
    }

    private async Task UpdateImage(MediaLayer? layer, GarlicSystem? system, bool updateImage = false)
    {
        if (layer is not null && system is not null && _fabricCanvas is not null && _game is not null)
        {
            if (updateImage)
            {
                var gameMedia = await GameMediaGeneration.GetMediaFromMediaLayer(_game, layer, system);
                if (gameMedia.media is MediaResponse media)
                {
                    await _fabricCanvas.UpdateImage(layer.id, layer, media.path.Replace("wwwroot/", "").Replace(@"wwwroot\", ""));
                }
            }
            else
            {
                await _fabricCanvas.UpdateImage(layer.id, layer);
            }
        }
    }

    async Task AddImageToCanvas(string? imagePath, MediaLayer layer)
    {
        if (imagePath is not null && _fabricCanvas is not null)
        {
            await _fabricCanvas.AddImage(imagePath.Replace("wwwroot/", "").Replace(@"wwwroot\", ""), layer.id, layer);
        }
    }

    async Task AddNewMediaLayerImageToCanvas((string? imagePath, string mediaType) image)
    {
        if (image.imagePath is not null
            && _fabricCanvas is not null
            && _selectedMediaLayerCollection is not null)
        {
            var layer = new MediaLayer
                {
                    mediaType = image.mediaType,
                    order = _selectedMediaLayerCollection.mediaLayers.Count + 1,
                    path = image.imagePath
                };

            GameMediaGeneration.AddMediaLayer(layer, _selectedMediaLayerCollection);
            await _fabricCanvas.AddImage(image.imagePath.Replace("wwwroot/", "").Replace(@"wwwroot\", ""), layer.id, layer);
        }
    }
}
