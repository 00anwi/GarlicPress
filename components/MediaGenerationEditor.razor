@using GarlicPress.classes.bitmapClasses;
@using GarlicPress.components.shared;
@using GarlicPress.constants;
@using GarlicPress.forms;
@using static GarlicPress.components.shared.FabricCanvas<MediaLayer>;
@inject EditMediaLayersForm editMediaLayersForm

<style>
    label {
        font-family: 'GarlicFont';
    }

</style>

<div class="h-screen flex flex-col">
    <div class="grid grid-cols-3 gap-2">
        <div>
            <label for="drive" class="block text-lg font-medium text-white">
                <b>Drive</b>
            </label>
            <select id="drive" @bind="SelectedDriveValue" @bind:after="(() => SelectedDrive = GarlicDrive.GetGarlicDrives().FirstOrDefault(x => x.name == SelectedDriveValue))"
                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 ">
                @foreach (var drive in GarlicDrive.GetGarlicDrives())
                {
                    <option value="@drive.name">@drive.name</option>
                }
            </select>
        </div>
        <div>
            <label for="System" class="block text-lg font-medium text-white">
                <b>System</b>
            </label>
            <select id="System" @bind="SelectedSystemValue" @bind:after="(() => { SelectedSystem = GarlicSystem.GetAllSystems().FirstOrDefault(x => x.name == SelectedSystemValue); UpdateGames();})"
                    class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 ">
                @foreach (var system in GarlicSystem.GetAllSystems())
                {
                    <option value="@system.name">@system.name</option>
                }
            </select>
        </div>
        <div>
            <label for="Game" class="block text-lg font-medium text-white">
                <b>Game</b>
            </label>
            @if (Games.Any())
            {
                <select id="Game" @bind="SelectedGame" @bind:after="(async () => { await UpdateGameArt(); })"
                        class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                    @foreach (var game in Games)
                    {
                        <option value="@game">@game</option>
                    }
                </select>
            }
            else
            {
                <input id="Game" type="text" @bind="SelectedGame" @bind:after="(async () => { await UpdateGameArt(); })"
                       class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2" />
            }
        </div>
    </div>

    <div class="grid grid-cols-3 overflow-auto gap-2 p-2 flex-grow ">
        <div class="col-span-2 flex justify-center items-center h-[65vh]">
            <FabricCanvas TItem="MediaLayer" width="640" height="480" @ref="fabricCanvas" MediaUpdated="OnMediaUpdated" MediaDeleted="OnMediaDeleted" MediaSelected="OnMediaSelected" MediaUnselected="OnMediaUnselected" />
        </div>

        <div class="flex-initial border rounded-lg border-white overflow-auto scrollbar p-2 h-[65vh]">
            <MediaLayerControl IsImageSelected="imageSelected" OnApplyFilters="async () => await UpdateImage(selectedMediaLayer, true)" mediaLayer="selectedMediaLayer" mediaLayerChanged="async () => await UpdateImage(selectedMediaLayer)" />
        </div>


        <div class="col-span-3 overflow-auto grid grid-cols-4">
            <div class="col-span-3 border rounded-lg p-2  scrollbar min-h-0 h-full border-white">

                <button class="px-5 py-2.5 text-center bg-blue-500 hover:bg-blue-300 rounded text-white" @onclick="GetAllGameMedia">
                    <b>Get Game Art</b>
                </button>

                <div class="p-2 flex flex-wrap overflow-auto scrollbar max-h-[80%]">
                    @foreach (var gameMedia in GameMedias)
                    {
                        <div class="p-2">
                            <img class="max-h-40 m-1" src="@gameMedia.imagePath" @onclick="(async () => await AddNewMediaLayerImageToCanvas(gameMedia.imagePath, gameMedia.mediaType))" />
                        </div>
                    }
                    @if (ArtUpdateRunning)
                    {
                        <div class="grid place-content-center p-2">
                            <div class="flex items-center gap-2 text-white">
                                <span class="h-10 w-10 block rounded-full border-4 border-t-green-600 animate-spin"></span>
                                loading...
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="col-span-1 grid">

                <button class="px-5 py-2.5 text-center bg-blue-500 hover:bg-blue-300 rounded m-2 py-2 text-white"
                @onclick="(async () => { await UpdateGameArt(); })">
                    <b>Update</b>
                </button>

                <button class="px-5 py-2.5 text-center bg-blue-500 hover:bg-blue-300 rounded m-2 py-2 text-white"
                @onclick="() => { GameMediaGeneration.SaveMediaLayoutJson(); editMediaLayersForm.Close(); }">
                    <b>Save</b>
                </button>

                <button class="px-5 py-2.5 text-center bg-gray-500 hover:bg-gray-300 rounded m-2 py-2 text-black"
                @onclick="() => { editMediaLayersForm.Close(); }">
                    <b>Cancel</b>
                </button>

            </div>
        </div>
    </div>
</div>

@code {
    FabricCanvas<MediaLayer>? fabricCanvas;

    private List<IFilter> Filters = new();
    private bool imageSelected = false;
    private MediaLayer? selectedMediaLayer;

    bool ArtUpdateRunning;

    string SelectedImgPath { get { return SelectedDrive?.path + "/Roms/" + SelectedSystem?.folder + "/Imgs/"; } }
    string SelectedRomPath { get { return SelectedDrive?.romPath + "/" + SelectedSystem?.folder; } }
    GarlicDrive? SelectedDrive { get; set; }
    string? SelectedDriveValue { get; set; }
    GarlicSystem? SelectedSystem { get; set; }
    string? SelectedSystemValue { get; set; }

    List<string> Games = new();
    string SelectedGame = "";

    List<(string mediaType, string imagePath)> GameMedias = new();
    GameResponse? game;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            SelectedDrive = GarlicDrive.GetGarlicDrives().First();
            SelectedSystem = GarlicSystem.GetAllSystems().First();
        }
    }

    private void OnMediaUpdated(FabricCanvas<MediaLayer>.imageDetails details)
    {
        if (GameMediaGeneration.MediaLayers.FirstOrDefault(x => x.id == Guid.Parse(details.id)) is MediaLayer layer)
        {
            layer.x = details.left;
            layer.y = details.top;
            layer.resizePercent = details.scale;
            layer.angle = details.angle;
            layer.order = details.drawOrder;

            selectedMediaLayer = layer;
        }
        StateHasChanged();
    }

    private void OnMediaDeleted(Guid id)
    {
        GameMediaGeneration.RemoveMediaLayer(id);
    }

    void OnMediaSelected(FabricCanvas<MediaLayer>.imageDetails details)
    {
        if (GameMediaGeneration.MediaLayers.FirstOrDefault(x => x.id == Guid.Parse(details.id)) is MediaLayer layer)
        {
            layer.x = details.left;
            layer.y = details.top;
            layer.resizePercent = details.scale;
            layer.angle = details.angle;
            layer.order = details.drawOrder;

            selectedMediaLayer = layer;
        }
        imageSelected = true;
    }

    void OnMediaUnselected()
    {
        imageSelected = false;
    }

    void UpdateGames()
    {
        if (ADBConnection.deviceConnected)
        {
            var list = ADBConnection.GetDirectoryListing(SelectedRomPath);
            Games = list.Where(w => w.Path != "." && w.Path != ".." && w.Path != "Imgs").OrderBy(o => o.Path).Select(x => x.Path).ToList();
        }
    }

    async Task UpdateGameArt()
    {
        if (!ArtUpdateRunning && SelectedSystem is not null && fabricCanvas is not null)
        {
            ArtUpdateRunning = true;
            GameMedias.Clear();
            await fabricCanvas.ClearCanvas();
            await fabricCanvas.AddBackgroundImage(PathConstants.assetSkinPath.Replace("wwwroot/", "") + "background.png");

            await AddText();

            game = await ScreenScraper.GetGameData(SelectedSystem, SelectedGame, SearchType.GameName);
            if (game is not null && game.status != "error")
            {
                await foreach (var gameMedia in GameMediaGeneration.GetGameMedia(game))
                {
                    var mediaPath = gameMedia.media.path.Replace("wwwroot/", "");
                    await AddImageToCanvas(mediaPath, gameMedia.layer);
                }
            }
            else if (game != null)
            {
                MessageBox.Show("Game not Found : " + game.statusMessage, "warn");
            }
            else
            {
                MessageBox.Show("Error : null GameResponse! " + SelectedGame ?? "", "error");
            }

            ArtUpdateRunning = false;
        }
    }

    async void GetAllGameMedia()
    {
        if (!ArtUpdateRunning && SelectedSystem is not null)
        {
            ArtUpdateRunning = true;
            GameMedias.Clear();
            game ??= await ScreenScraper.GetGameData(SelectedSystem, SelectedGame, SearchType.GameName);
            if (game is not null && game.status != "error")
            {
                await foreach (var gameMedia in GameMediaGeneration.GetAllGameMedia(game))
                {
                    if (gameMedia.media.path is not null)
                    {
                        GameMedias.Add((gameMedia.mediaType, gameMedia.media.path.Replace("wwwroot/", "")));
                    }
                    await this.InvokeAsync(() => StateHasChanged());
                }
            }

            ArtUpdateRunning = false;
            StateHasChanged();
        }
    }

    async Task AddText()
    {
        if (fabricCanvas is not null)
        {
            if (Games.Any())
            {
                var indexof = Games.IndexOf(SelectedGame);
                await fabricCanvas.AddText(String.Join("\n", GetSurroundingStrings(Games, indexof)), GarlicSkin.skinSettings.textmargin, 90, GarlicSkin.skinSettings.colorguide, "GarlicFont", GarlicSkin.languageFiles.First().garlicLanguageSettings.fontsize, GarlicSkin.skinSettings.textalignment);
            }
            else
            {
                await fabricCanvas.AddText(String.Join("\n", Enumerable.Repeat(SelectedGame, 8)), 340, 90, "white", "GarlicFont");
            }
        }
    }

    public static List<string> GetSurroundingStrings(List<string> source, int index)
    {
        int start = Math.Max(0, index - 4); // Ensure we don't go below 0
        int count = 8;

        // If we're near the start of the list, adjust count to get more elements after index
        if (start < index - 4)
        {
            count += (index - 4) - start;
        }

        // If we're near the end of the list, adjust count to stay within bounds
        if (start + count > source.Count)
        {
            count = source.Count - start;
        }

        return source.Skip(start).Take(count).ToList();
    }

    private async Task UpdateImage(MediaLayer? layer, bool updateImage = false)
    {
        if (layer is not null && fabricCanvas is not null && game is not null)
        {
            if (updateImage)
            {
                var gameMedia = await GameMediaGeneration.GetMediaFromMediaLayer(game, layer);
                await fabricCanvas.UpdateImage(layer.id, layer, gameMedia.media.path.Replace("wwwroot/", ""));
            }
            else
            {
                await fabricCanvas.UpdateImage(layer.id, layer);
            }
        }
    }


    async Task AddImageToCanvas(string? imagePath, MediaLayer layer)
    {
        if (imagePath is not null && fabricCanvas is not null)
        {
            await fabricCanvas.AddImage(imagePath, layer.id, layer);
        }
    }

    async Task AddNewMediaLayerImageToCanvas(string? imagePath, string mediaType)
    {
        if (imagePath is not null && fabricCanvas is not null)
        {
            var layer = new MediaLayer { mediaType = mediaType, order = GameMediaGeneration.MediaLayers.Count };
            GameMediaGeneration.AddMediaLayer(layer);
            await fabricCanvas.AddImage(imagePath, layer.id, layer);
        }
    }
}
