@if (GradientFilterSettings is not null)
{
    <h2 class="text-lg mb-4 text-white">Gradient Controls</h2>
    <div>
        <label for="angle" class="block text-white text-sm font-medium text-gray-700">Angle: @GradientFilterSettings.Angle°</label>
        <input type="range" id="angle" min="-90" max="90" @bind:event="oninput" @bind="GradientFilterSettings.Angle" @bind:after="ApplyFilters" class="mt-2 w-full slider">
    </div>

    <div class="mt-4">
        <label for="start" class="block text-white text-sm font-medium text-gray-700">Start: @(GradientFilterSettings.Start * 100)%</label>
        <input type="range" id="start" min="0.0" max="1.0" step="0.01" @bind:event="oninput" @bind="GradientFilterSettings.Start" @bind:after="ApplyFilters" class="mt-2 w-full slider">
    </div>

    <div class="mt-4">
        <label for="end" class="block text-white text-sm font-medium text-gray-700">Width: @(GradientFilterSettings.Width * 100)%</label>
        <input type="range" id="end" min="0.0" max="1.0" step="0.01" @bind:event="oninput" @bind="GradientFilterSettings.Width" @bind:after="ApplyFilters" class="mt-2 w-full slider">
    </div>

    <div class="border rounded p-1">
        <p class="text-white">Color 1</p>
        <ColorInput @bind-Value="GradientFilterSettings.Color1" @bind-Value:after="ApplyFilters" />
    </div>

    <div class="border rounded p-1">
        <p class="text-white">Color 2</p>
        <ColorInput @bind-Value="GradientFilterSettings.Color2" @bind-Value:after="ApplyFilters" />
    </div>
}

@code {

    [Parameter]
    public GradientFilter? GradientFilterSettings { get; set; }

    [Parameter]
    public EventCallback OnApplyFilters { get; set; }

    private void ApplyFilters()
    {
        OnApplyFilters.InvokeAsync();
    }

}
